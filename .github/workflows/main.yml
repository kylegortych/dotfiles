name: Nix Config Lint
on:
  push:
    branches:
      - main
    paths:
      - '*.nix'
      - 'dotfiles/**'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: cachix/install-nix-action@v26
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Evaluate Nix configurations
        run: |
          nix-instantiate --eval configuration.nix dotfiles/*.nix

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Extract content from Nix files
        run: |
          python3 - <<EOF
          import os
          import re

          def extract_content(file_path):
              with open(file_path, 'r') as f:
                  content = f.read()
              
              # Updated regex pattern to capture content correctly
              pattern = r'"([^"]+)".text\s*=\s*\'\'\s*([\s\S]*?)\'\'\s*;\s*'
              matches = re.findall(pattern, content, re.DOTALL)
              
              for file_path, file_content in matches:
                  file_name = os.path.basename(file_path)
                  full_path = os.path.join('extracted_files', file_name)
                  with open(full_path, 'w') as f:
                      f.write(file_content.strip())  # Strip leading/trailing whitespace

          os.makedirs('extracted_files', exist_ok=True)
          for root, dirs, files in os.walk('dotfiles'):
              for file in files:
                  if file.endswith('.nix') and file != 'neovim.nix':
                      extract_content(os.path.join(root, file))
          EOF

      - name: Debug - List extracted files
        run: |
          ls -R extracted_files

      - name: Print contents of extracted files
        run: |
          echo "Contents of extracted files:"
          find extracted_files -type f | while read file; do
            echo "=== Contents of $file ==="
            cat "$file"
            echo ""
          done

      - name: Run Super-Linter
        uses: github/super-linter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BRANCH: main
          VALIDATE_ALL_CODEBASE: false
          FILTER_REGEX_INCLUDE: extracted_files/.*\.(toml|lua|el|fish)$
          VALIDATE_LUA: true
          VALIDATE_FISH: true
          VALIDATE_ELISP: true
          VALIDATE_TOML: true
          ACTIONS_RUNNER_DEBUG: true

      - name: Debug - Show Super-Linter logs
        if: failure()
        run: |
          cat /home/runner/work/_temp/linter.log || echo "Linter log not found"
          ls -la /home/runner/work/_temp || echo "Temp directory not accessible"
